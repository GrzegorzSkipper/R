password = "postgres") # to nie jest dobra praktyka na haslo, powinno byc w zmiennych srodowiskowych
dane <- dbGetQuery(con, paste0("SELECT * from ",link))
}
return(dane)
}
pobierz_dane(CSV, HTTP:WWW.ESSA.PL)
pobierz_dane(csv, HTTP:WWW.ESSA.PL)
pobierz_dane("csv", HTTP:WWW.ESSA.PL)
x<-c("devtools", "openxlsx", "RPostgreSQL", "dplyr")
require(x)
lapply(x, require, character.only = TRUE)
do.call("require", x)
lapply(x, require, character.only = TRUE)
#install.packages("pacman")
pacman::p_load(dplyr, psych, tm)
install.packages("pacman")
pacman::p_load(dplyr, psych, tm)
pacman::p_load("devtools", "openxlsx", "RPostgreSQL", "dplyr")
pacman::p_load(devtools, openxlsx, RPostgreSQL, dplyr)
install.packages("pacman")
install.packages("pacman")
pacman::p_load(devtools, openxlsx, RPostgreSQL, dplyr)
install.packages("pacman")
install.packages("pacman")
pacman::p_load(devtools, openxlsx, RPostgreSQL, dplyr)
## install.packages("pacman")
pacman::p_load(devtools, openxlsx, RPostgreSQL, dplyr)
## install.packages("pacman")
pacman::p_load(devtools, openxlsx, RPostgreSQL, dplyr)
lapply(x, FUN = function(X) {
do.call("require", list("devtools", "openxlsx", "RPostgreSQL", "dplyr"))
})
lapply("devtools", "openxlsx", "RPostgreSQL", "dplyr")
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
packages <- c("ggplot2", "plyr", "reshape2", "RColorBrewer", "scales", "grid")
ipak(packages)
packages <- c("devtools", "openxlsx", "RPostgreSQL", "dplyr")
ipak(packages)
ipak(packages)
lapply(x, FUN = function(X) {
do.call("require", list(x))
})
lapply("devtools", "openxlsx", "RPostgreSQL", "dplyr")
k
ipak(packages)
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
packages <- c("devtools", "openxlsx", "RPostgreSQL", "dplyr")
ipak(packages)
lubripack
install.packages("lubripack")
install_github("rstudio/lubripack")
library("lubripack")
lubripack("devtools", "openxlsx", "RPostgreSQL", "dplyr")
library("devtools")
install_github("espanta/lubripack")
library("lubripack")
lubripack("devtools", "openxlsx", "RPostgreSQL", "dplyr")
library("devtools")
install_github("espanta/lubripack")
lubripack("devtools", "openxlsx", "RPostgreSQL", "dplyr")
library("lubripack")
lubripack("devtools", "openxlsx", "RPostgreSQL", "dplyr")
libraries("devtools", "openxlsx", "RPostgreSQL", "dplyr")
install_github("jakesherman/packages")
library(packages)
library("packages")
lubripack("devtools", "openxlsx", "RPostgreSQL", "dplyr")
install_github("espanta/lubripack")
libraries <- c("devtools", "openxlsx", "RPostgreSQL", "dplyr")
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
packages <- c("devtools", "openxlsx", "RPostgreSQL", "dplyr")
ipak(packages)
installed.packages()
loaded_packages()
active_packages <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
packages <- c("devtools", "openxlsx", "RPostgreSQL", "dplyr")
active_packages(packages)
active_packages(packages)
active_packages <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
print("packages ready")
}
packages <- c("devtools", "openxlsx", "RPostgreSQL", "dplyr")
active_packages(packages)
con <- dbConnect(drv, dbname = "postgres", host = "localhost", port = 5433, user = "postgres", password = "admin")
# 4) load all data from szczegoly_rekompensat table into data frame called df_compensations
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, dbname = "postgres", host = "localhost", port = 5433, user = "postgres", password = "admin")
dbExistsTable(con, "szczegoly_rekompensat")
szczeg_rekompensat <- dbGetQuery(con, "SELECT * from szczegoly_rekompensat")
df_compensations<- data.frame(dbGetQuery(con, "SELECT * from szczegoly_rekompensat")) #przypisuje tabelę do ramki danych
# 5) check if table tab_1 exists in a connection defined in previous point
dbExistsTable(con, "tab_1")
summary(df_compensations)
sample_vector_seq <- seq(1:41, 20)
sample_vector_seq <- seq(1:41, by=20)
seq(1:41, by=20)
sample_vector_seq <- seq(1,41, by=20)
seq(1,41, by=20)
v_combined <- sample_vector+sample_vector_seq
v_combined
v_combined <- sample_vector+sample_vector_seq
v_combined
sample_vector <- c(1,21,41)
sample_vector_seq <- seq(1,41, by=20)
v_combined <- sample_vector + sample_vector_seq
v_combined
rev(v_combined)
v_accounts <- c(df_compensations$konto)
length(v_accounts)
v_accounts_unique <- length(unique(v_accounts_unique))
v_accounts_unique <- length(unique(c(v_accounts_unique)))
v_accounts_unique <- length(unique(c(v_accounts_unique)))
v_accounts_unique <- length(unique(c(vv_accounts)))
v_accounts_unique <- length(unique(c(v_accounts)))
v_accounts_unique
sample_matrix <- rbind(c(998, 0), c(1,1))
class(sample_matrix)
sample_matrix
colnames(sample_matrix) <- c("no cancer", "cancer")
rownames(sample_matrix) <- c("no cancer", "cancer")
sample_matrix
sample_matrix[2,2]
sample_matrix[2,2]%sample_matrix[2,2]
TP <- ample_matrix[2,2]
TP <- sample_matrix[2,2]
TP%TP
TP/TP
sample_matrix[1,2]
FP <- sample_matrix[1,2]
TP/(TP+FP)
FN <- sample_matrix[2,1]
FN
recall <- TP/(TP+FN)
recall
TN <- sample_matrix[1,1]
acuracy <- TN/(TP+FP+FN+TN)
acuracy
fscore <- 2((precision*recall)/(precision+recall))
fscore <- 2*((precision*recall)/(precision+recall))
precision <- TP/(TP+FP)
fscore <- 2*((precision*recall)/(precision+recall))
fscore
gen_matrix <-  matrix(1:50, nrow = 100, ncol = 10)
gen_matrix
?matrix
marix(sample(1:50,100),nrow = 100, ncol = 10)
?matrix
View(gen_matrix)
View(gen_matrix)
essa <- marix(sample(1:50,100),nrow = 100, ncol = 10)
matrix(sample(1:50,100),nrow = 100, ncol = 10)
matrix(sample(1:50,100,replace =T),nrow = 100, ncol = 10)
?sample
.Random.seed[-1] == r[1:3]
sample(c(0,1), 100, replace = TRUE)
x <- 1:10
sample(x[x >  8]) # length 2
sample(x[x >  9]) # oops -- length 10!
sample(x[x > 10]) # length 0
d <- 1:100
matrix(sample(d,100,replace =T),nrow = 100, ncol = 10)
matrix(sample(d,100,replace =T),nrow = 100, ncol = 10, byrow = T)
gen_matrix <-  matrix(sample(d,100,replace =T),nrow = 100, ncol = 10, byrow = T)
gen_matrix
ample(1:100,1)
sample(1:100,1)
l_persons <- list(name=c("Ździsław", "Miecio", "Halyna"),
surname=c("Putinowski", "Pudżianowski", "Beger"),
test_results=c(sample(1:100,1)),
homework_results=c(sample(1:100,1)))
l_persons
l_persons <- list(name=c("Ździsław", "Miecio", "Halyna"),
surname=c("Putinowski", "Pudżianowski", "Beger"),
test_results=c((sample(1:100,1)),(sample(1:100,1)),(sample(1:100,1))),
homework_results=c((sample(1:100,1)),(sample(1:100,1)),(sample(1:100,1))))
l_persons
l_persons[1]
l_persons$name
list(unique(df_compensations$konto))
class(l_accounts_unique)
l_accounts_unique <-  list(unique(df_compensations$konto))
class(l_accounts_unique)
df_comp_small <- data.frame(df_compensations$id_agenta, df_compensations$data_otrzymania, df_compensations$kwota, df_compensations$konto)
View(df_comp_small)
View(df_comp_small)
#AGREGOWANIE
posortowane %>% #tłumacząc: weź mój data frame i wykonaj co następuje po znaczku %>%
#w summarise definiujemy kolejne agregaty
summarise(sr_rekomp = mean(posortowane$kwota_rekompensaty), #sr_rekomp- to nawa kolumny i bedie liona srednia
med = median(posortowane$kwota_rekompensaty)) #następnie liczymy medianę z kolumny kwota rekom
podsumowanie <- summary(posortowane)
przefiltrowane <- filter(wnioski_db, wnioski_db$kanal == 'bezposredni')
wnioski_db <- dbGetQuery(con, "SELECT * from wnioski")
przefiltrowane <- filter(wnioski_db, wnioski_db$kanal == 'bezposredni')
posortowane <- arrange(przefiltrowane, partner, desc(data_utworzenia))
podsumowanie <- summary(posortowane)
podsumowanie
#AGREGOWANIE
posortowane %>% #tłumacząc: weź mój data frame i wykonaj co następuje po znaczku %>%
#w summarise definiujemy kolejne agregaty
summarise(sr_rekomp = mean(posortowane$kwota_rekompensaty), #sr_rekomp- to nawa kolumny i bedie liona srednia
med = median(posortowane$kwota_rekompensaty)) #następnie liczymy medianę z kolumny kwota rekom
new <- data.frame(df_comp_small%>%
new
new <- data.frame(df_comp_small%>%
new <- data.frame(df_comp_small%>%
new
new <- data.frame(df_comp_small%>%
group_by(df_comp_small$df_compensations.konto)%>%
summarise(rows_per_account=n(),sum=(df_comp_small$df_compensations.kwota)))
new
new_data_frame <- data.frame(df_comp_small%>%
group_by(df_comp_small$df_compensations.konto)%>%
summarise(rows_per_account=n(),sum=(df_comp_small$df_compensations.kwota)))
new_data_frame <- data.frame(df_comp_small%>%
group_by(df_comp_small$df_compensations.konto)%>%
summarise(rows_per_account=n(),value_of_recompensations=sum(df_comp_small$df_compensations.kwota)))
new_data_frame
best_agent <-  data.frame(df_comp_small%>%
group_by(df_comp_small$df_compensations.id_agenta)%>%
summarise(rows_per_account=n(),value_of_recompensations=sum(df_comp_small$df_compensations.kwota)))
best_agent
#BŁĄD
#GRUPOWANIE
#gdy mamy data frame - możemy %>% wskazujemy że chcemy wykonać na nim operację
posortowane %>%  #weź sobie posortowane i co nstęouje:
group_by(posortowane$typ_wniosku) %>% #wskazujemy by grupował
summarise(sr_rekomp = mean(posortowane$kwota_rekompensaty),
med = median(posortowane$kwota_rekompensaty), liczba=n()) #liczba=n() to taki sqloqy count
#BŁĄD
#GRUPOWANIE
#gdy mamy data frame - możemy %>% wskazujemy że chcemy wykonać na nim operację
posortowane %>%  #weź sobie posortowane i co nstęouje:
group_by(posortowane$typ_wniosku) %>% #wskazujemy by grupował
summarise(sr_rekomp = mean(posortowane$kwota_rekompensaty),
med = median(posortowane$kwota_rekompensaty), liczba=n()) #liczba=n() to taki sqloqy count
#GRUPOWANIE
#gdy mamy data frame - możemy %>% wskazujemy że chcemy wykonać na nim operację
posortowane %>%  #weź sobie posortowane i co nstęouje:
group_by(posortowane$typ_wniosku) %>% #wskazujemy by grupował
summarise(sr_rekomp = mean(kwota_rekompensaty),
med = median(posortowane$kwota_rekompensaty), liczba=n()) #liczba=n() to taki sqloqy count
best_agent <-  data.frame(df_comp_small%>%
group_by(df_comp_small$df_compensations.id_agenta)%>%
summarise(rows_per_account=n(),value_of_recompensations=sum(df_compensations.kwota)))
best_agent
posortowane <- arrange(przefiltrowane, partner, desc(data_utworzenia))
posortowane
posortowane_best_agent <- arrange(best_agent, desc(value_of_recompensations))
posortowane_best_agent
posortowane_best_agent <- arrange(best_agent, desc(rows_per_account), desc(value_of_recompensations))
posortowane_best_agent
for (i in (sample(1:100,100)) {
random100 <- (sample(1:100,100)
for (i in random100) {
print
}
for (i in random100) {
print (i)
}
random100 <- (sample(1:100,100)
random100 <- sample(1:100,100)
random100 <- sample(1:100,100)
for (i in random100) {
print (i)
}
i <-  1:50
while (i==20) {
print(i)
}
i <-  sample(1:100,1)
while (i==20) {
print(i)
i <-  sample(1:100,1)
}
i <-  0
while (i<5) {
cat(paste("juz", i , "\n"))
i <-  i+1
}
i <-  sample(1:100,1)
while (i==20) {
cat(paste(i))
i <-  sample(1:100,1)
}
i <-  c(sample(1:100,1))
while (i==20) {
cat(paste(i))
i <-  c(sample(1:100,1))
}
i <-  c(sample(1:100,1,replace = T))
while (i==20) {
cat(paste(i))
i <-  c(sample(1:100,1,replace = T))
}
i <-  sample(1:100,1,replace = T)
while (i==20) {
cat(paste(i))
i <-  sample(1:100,1,replace = T)
}
while (i=20) {
cat(paste(i))
i <-  sample(1:100,1,replace = T)
}
while (i=20) {
print(i)
i <-  sample(1:100,1,replace = T)
}
i <-  sample(1:100,1,replace = T)
while (i=20) {
print(i)
i <-  sample(1:100,1,replace = T)
}
while (i<20) {
print(i)
i <-  sample(1:100,1,replace = T)
}
i <-  sample(1:100,1,replace = T)
while (i<20) {
print(i)
i <-  sample(1:100,1,replace = T)
}
while (i<20) {
print(i)
i <-  sample(1:100,1,replace = T)
}
i <-  0
while (i<20) {
cat(paste("juz", i , "\n"))
i <- sample(1:100,1,replace = T)
}
while (i=20) {
cat(paste("juz", i , "\n"))
i <- sample(1:100,1,replace = T)
}
i <-  0
while (i<5) {
cat(paste("juz", i , "\n"))
i <-  i+1
}
while (i==20) {
cat(paste(i , "\n"))
i <- sample(1:100,1,replace = T)
}
i==20
i=20
i==20
i <-  0
while (i==20) {
cat(paste(i , "\n"))
i <- i <- sample(1:100,1,replace = T)
}
i <-  0
while (i==20) {
print(i , "\n"))
i <- i <- sample(1:100,1,replace = T)
}
while (i==20) {
print(i , "\n")
i <- i <- sample(1:100,1,replace = T)
}
i <-  0
while (i==20) {
print(i , "\n")
i <- sample(1:100,1,replace = F)
}
i <-  0
while (i==20) {
print(i)
i <- sample(1:100,1,replace = F)
}
i <-  0
while (i==20) {
print(i)
i <- (sample(1:100,1))
}
i <-  0
while (i==20) {
print(i)
i <- (sample(1:100,100))
}
i <-  sample(1:100,100)
while (i==20) {
print(i)
i <- (sample(1:100,100))
}
i <-  sample(1:100,1)
while (i==20) {
print(i)
i <- sample(1:100,1)
}
cbind(df_comp_small, amount_category)
cbind(df_comp_small, c(amount_category))
cbind(df_comp_small, [amount_category])
cbind(df_comp_small, amount_category)
amount_category <- amount
colnames(df_comp_small)
colnames(df_comp_small) <- c("df_compensations.id_agenta", "df_compensations.data_otrzymania", "df_compensations.kwota", "df_compensations.konto", "df_compensations.amount_category")
df_compensations$amount_category
df_comp_small$amount_category
colnames(df_comp_small)
df_comp_small$amount_category=NULL
colnames(df_comp_small)
View(df_comp_small)
df_comp_small$amount_category=NULL
View(df_comp_small)
View(df_compensations)
df_comp_small["amount_category"] <- NULL
colnames(df_comp_small)
colnames(df_comp_small)
df_comp_small["amount_category"] <- NA
colnames(df_comp_small)
?dbWriteTable
dbWriteTable(con, name="df_comp_small", df_comp_small)
x<-1
ifelse(x<10, "male", "duze")
new_data_frame
posortowane_best_agent <- arrange(best_agent, desc(rows_per_account), desc(value_of_recompensations))
new_data_frame <- data.frame(df_comp_small%>%
group_by(df_comp_small$df_compensations.konto)%>%
summarise(rows_per_account=n(),value_of_recompensations=sum(df_compensations.kwota)))
new_data_frame
avg_amount <- mean(df_compensations.kwota)
avg_amount <- mean(df_comp_small$df_compensations.kwota)
avg_amount
#AGREGOWANIE
posortowane %>% #tłumacząc: weź mój data frame i wykonaj co następuje po znaczku %>%
#w summarise definiujemy kolejne agregaty
summarise(sr_rekomp = mean(posortowane$kwota_rekompensaty), #sr_rekomp- to nawa kolumny i bedie liona srednia
med = median(posortowane$kwota_rekompensaty)) #następnie liczymy medianę z kolumny kwota rekom
#BŁĄD
#GRUPOWANIE
#gdy mamy data frame - możemy %>% wskazujemy że chcemy wykonać na nim operację
posortowane %>%  #weź sobie posortowane i co nstęouje:
group_by(posortowane$typ_wniosku) %>% #wskazujemy by grupował
summarise(sr_rekomp = mean(posortowane$kwota_rekompensaty),
med = median(posortowane$kwota_rekompensaty), liczba=n()) #liczba=n() to taki sqloqy count
mtcars6 <- mtcars[mtcars$cyl==6,]
mtcars6
View(df_comp_small)
df_comp_small$amount_category <- {
if (df_comp_small$df_compensations.kwota > avg_amount) {
"high"
} else {
"small"
}
}
View(df_comp_small)
?dplyr
?dplyr.ddply
?ddply
View(df_comp_small)
?do
summary(mtcars6)
mtcars6 <- mtcars[mtcars$cyl==6,]
summary(mtcars6)
df_comp_small666 <- df_comp_small[ if (df_comp_small$df_compensations.kwota > avg_amount) {
"high"
} else {
"small"
},]
View(df_comp_small666)
df_comp_small666 <- df_comp_small[ (if (df_comp_small$df_compensations.kwota > avg_amount) {
"high"
} else {
"small"
}),]
df_comp_small$amount_category <- {
if (df_comp_small$df_compensations.kwota > avg_amount) {
"high"
} else {
"small"
}
}
############################################################
i <-  sample(1:100,1)
############################################################
i <-  sample(1:50,1)
while (i!=20) {
print(i)
i <- sample(1:50,1)
}
